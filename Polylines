//@version=5
indicator("Polylines example", overlay = true)

//@variable If `true`, uses curved lines to connect the points.
bool curvedInput = input.bool(false, "Curved polyline")
//@variable If `true`, connects the polyline's first and last points.
bool closedInput = input.bool(true,  "Closed polyline")
//@variable The color of the space filled by the polyline.
color fillcolor = input.color(color.new(color.blue, 90), "Fill Color")

// Time and price inputs for the polyline's points.
p1x = input.time(0,  "p1", confirm = true, inline = "p1")
p1y = input.price(0, "  ", confirm = true, inline = "p1")
p2x = input.time(0,  "p2", confirm = true, inline = "p2")
p2y = input.price(0, "  ", confirm = true, inline = "p2")
p3x = input.time(0,  "p3", confirm = true, inline = "p3")
p3y = input.price(0, "  ", confirm = true, inline = "p3")
p4x = input.time(0,  "p4", confirm = true, inline = "p4")
p4y = input.price(0, "  ", confirm = true, inline = "p4")
p5x = input.time(0,  "p5", confirm = true, inline = "p5")
p5y = input.price(0, "  ", confirm = true, inline = "p5")

// Draw only once on the last historical bar, so the script runs faster.
if barstate.islastconfirmedhistory
    //@variable An array of `chart.point` objects for the polyline.
    var points = array.new<chart.point>()
    // Add the user-defined points to the `points` array.
    points.push(chart.point.from_time(p1x, p1y))
    points.push(chart.point.from_time(p2x, p2y))
    points.push(chart.point.from_time(p3x, p3y)) 
    points.push(chart.point.from_time(p4x, p4y))
    points.push(chart.point.from_time(p5x, p5y))
    // Create a new polyline from the `points` array.
    polyline.new(points, curved = curvedInput, closed = closedInput, fill_color = fillcolor, xloc = xloc.bar_time) 
    // Display the name of each point on the chart.
    for [pointNo, point] in points
        label.new(point, text = "p" + str.tostring(pointNo + 1), xloc = xloc.bar_time, color = na, textcolor = chart.fg_color)
